package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.UserCheckBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_CHECK_BEAN".
*/
public class UserCheckBeanDao extends AbstractDao<UserCheckBean, Long> {

    public static final String TABLENAME = "USER_CHECK_BEAN";

    /**
     * Properties of entity UserCheckBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Record_no = new Property(1, String.class, "record_no", false, "RECORD_NO");
        public final static Property Appform_no = new Property(2, String.class, "appform_no", false, "APPFORM_NO");
        public final static Property Devicetype = new Property(3, String.class, "devicetype", false, "DEVICETYPE");
        public final static Property Item_name = new Property(4, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Djdate = new Property(5, String.class, "djdate", false, "DJDATE");
        public final static Property Jcdate = new Property(6, String.class, "jcdate", false, "JCDATE");
        public final static Property Bgzt = new Property(7, String.class, "bgzt", false, "BGZT");
        public final static Property Zdyj = new Property(8, String.class, "zdyj", false, "ZDYJ");
        public final static Property Bgjy = new Property(9, String.class, "bgjy", false, "BGJY");
        public final static Property Bgdate = new Property(10, String.class, "bgdate", false, "BGDATE");
        public final static Property Bgresult = new Property(11, String.class, "bgresult", false, "BGRESULT");
    }


    public UserCheckBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserCheckBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_CHECK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_NO\" TEXT," + // 1: record_no
                "\"APPFORM_NO\" TEXT," + // 2: appform_no
                "\"DEVICETYPE\" TEXT," + // 3: devicetype
                "\"ITEM_NAME\" TEXT," + // 4: item_name
                "\"DJDATE\" TEXT," + // 5: djdate
                "\"JCDATE\" TEXT," + // 6: jcdate
                "\"BGZT\" TEXT," + // 7: bgzt
                "\"ZDYJ\" TEXT," + // 8: zdyj
                "\"BGJY\" TEXT," + // 9: bgjy
                "\"BGDATE\" TEXT," + // 10: bgdate
                "\"BGRESULT\" TEXT);"); // 11: bgresult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_CHECK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserCheckBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(2, record_no);
        }
 
        String appform_no = entity.getAppform_no();
        if (appform_no != null) {
            stmt.bindString(3, appform_no);
        }
 
        String devicetype = entity.getDevicetype();
        if (devicetype != null) {
            stmt.bindString(4, devicetype);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(5, item_name);
        }
 
        String djdate = entity.getDjdate();
        if (djdate != null) {
            stmt.bindString(6, djdate);
        }
 
        String jcdate = entity.getJcdate();
        if (jcdate != null) {
            stmt.bindString(7, jcdate);
        }
 
        String bgzt = entity.getBgzt();
        if (bgzt != null) {
            stmt.bindString(8, bgzt);
        }
 
        String zdyj = entity.getZdyj();
        if (zdyj != null) {
            stmt.bindString(9, zdyj);
        }
 
        String bgjy = entity.getBgjy();
        if (bgjy != null) {
            stmt.bindString(10, bgjy);
        }
 
        String bgdate = entity.getBgdate();
        if (bgdate != null) {
            stmt.bindString(11, bgdate);
        }
 
        String bgresult = entity.getBgresult();
        if (bgresult != null) {
            stmt.bindString(12, bgresult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserCheckBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(2, record_no);
        }
 
        String appform_no = entity.getAppform_no();
        if (appform_no != null) {
            stmt.bindString(3, appform_no);
        }
 
        String devicetype = entity.getDevicetype();
        if (devicetype != null) {
            stmt.bindString(4, devicetype);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(5, item_name);
        }
 
        String djdate = entity.getDjdate();
        if (djdate != null) {
            stmt.bindString(6, djdate);
        }
 
        String jcdate = entity.getJcdate();
        if (jcdate != null) {
            stmt.bindString(7, jcdate);
        }
 
        String bgzt = entity.getBgzt();
        if (bgzt != null) {
            stmt.bindString(8, bgzt);
        }
 
        String zdyj = entity.getZdyj();
        if (zdyj != null) {
            stmt.bindString(9, zdyj);
        }
 
        String bgjy = entity.getBgjy();
        if (bgjy != null) {
            stmt.bindString(10, bgjy);
        }
 
        String bgdate = entity.getBgdate();
        if (bgdate != null) {
            stmt.bindString(11, bgdate);
        }
 
        String bgresult = entity.getBgresult();
        if (bgresult != null) {
            stmt.bindString(12, bgresult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserCheckBean readEntity(Cursor cursor, int offset) {
        UserCheckBean entity = new UserCheckBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // record_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appform_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devicetype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // djdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // jcdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bgzt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zdyj
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bgjy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bgdate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // bgresult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserCheckBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecord_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppform_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevicetype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDjdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJcdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBgzt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZdyj(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBgjy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBgdate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBgresult(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserCheckBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserCheckBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserCheckBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
