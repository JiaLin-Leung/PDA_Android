package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.converter.CheckBeanListBean_Converter;
import java.util.List;

import com.pda.pda_android.db.Entry.CheckBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_BEAN".
*/
public class CheckBeanDao extends AbstractDao<CheckBean, Long> {

    public static final String TABLENAME = "CHECK_BEAN";

    /**
     * Properties of entity CheckBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Record_no = new Property(2, String.class, "record_no", false, "RECORD_NO");
        public final static Property List = new Property(3, String.class, "list", false, "LIST");
    }

    private final CheckBeanListBean_Converter listConverter = new CheckBeanListBean_Converter();

    public CheckBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"RECORD_NO\" TEXT," + // 2: record_no
                "\"LIST\" TEXT);"); // 3: list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(3, record_no);
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(4, listConverter.convertToDatabaseValue(list));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(3, record_no);
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(4, listConverter.convertToDatabaseValue(list));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckBean readEntity(Cursor cursor, int offset) {
        CheckBean entity = new CheckBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // record_no
            cursor.isNull(offset + 3) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 3)) // list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecord_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setList(cursor.isNull(offset + 3) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
