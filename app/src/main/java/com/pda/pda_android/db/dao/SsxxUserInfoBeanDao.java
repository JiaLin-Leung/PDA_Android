package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.SsxxUserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SSXX_USER_INFO_BEAN".
*/
public class SsxxUserInfoBeanDao extends AbstractDao<SsxxUserInfoBean, Long> {

    public static final String TABLENAME = "SSXX_USER_INFO_BEAN";

    /**
     * Properties of entity SsxxUserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shoushu_name = new Property(1, String.class, "shoushu_name", false, "SHOUSHU_NAME");
        public final static Property Shoushu_docter = new Property(2, String.class, "shoushu_docter", false, "SHOUSHU_DOCTER");
        public final static Property Shoushu_time = new Property(3, String.class, "shoushu_time", false, "SHOUSHU_TIME");
        public final static Property Shoushu_user = new Property(4, String.class, "shoushu_user", false, "SHOUSHU_USER");
    }


    public SsxxUserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SsxxUserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SSXX_USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHOUSHU_NAME\" TEXT," + // 1: shoushu_name
                "\"SHOUSHU_DOCTER\" TEXT," + // 2: shoushu_docter
                "\"SHOUSHU_TIME\" TEXT," + // 3: shoushu_time
                "\"SHOUSHU_USER\" TEXT);"); // 4: shoushu_user
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SSXX_USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SsxxUserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shoushu_name = entity.getShoushu_name();
        if (shoushu_name != null) {
            stmt.bindString(2, shoushu_name);
        }
 
        String shoushu_docter = entity.getShoushu_docter();
        if (shoushu_docter != null) {
            stmt.bindString(3, shoushu_docter);
        }
 
        String shoushu_time = entity.getShoushu_time();
        if (shoushu_time != null) {
            stmt.bindString(4, shoushu_time);
        }
 
        String shoushu_user = entity.getShoushu_user();
        if (shoushu_user != null) {
            stmt.bindString(5, shoushu_user);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SsxxUserInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shoushu_name = entity.getShoushu_name();
        if (shoushu_name != null) {
            stmt.bindString(2, shoushu_name);
        }
 
        String shoushu_docter = entity.getShoushu_docter();
        if (shoushu_docter != null) {
            stmt.bindString(3, shoushu_docter);
        }
 
        String shoushu_time = entity.getShoushu_time();
        if (shoushu_time != null) {
            stmt.bindString(4, shoushu_time);
        }
 
        String shoushu_user = entity.getShoushu_user();
        if (shoushu_user != null) {
            stmt.bindString(5, shoushu_user);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SsxxUserInfoBean readEntity(Cursor cursor, int offset) {
        SsxxUserInfoBean entity = new SsxxUserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shoushu_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shoushu_docter
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shoushu_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // shoushu_user
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SsxxUserInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShoushu_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShoushu_docter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShoushu_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShoushu_user(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SsxxUserInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SsxxUserInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SsxxUserInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
