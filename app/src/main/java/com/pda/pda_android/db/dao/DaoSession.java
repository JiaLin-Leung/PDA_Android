package com.pda.pda_android.db.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

<<<<<<< Updated upstream
import com.pda.pda_android.db.Entry.UserBean;
import com.pda.pda_android.db.Entry.SsxxUserInfoBean;
import com.pda.pda_android.db.Entry.UserCheckBean;

import com.pda.pda_android.db.dao.UserBeanDao;
import com.pda.pda_android.db.dao.SsxxUserInfoBeanDao;
import com.pda.pda_android.db.dao.UserCheckBeanDao;
=======
import com.pda.pda_android.db.Entry.JcjyBean;
import com.pda.pda_android.db.Entry.SsxxUserInfoBean;
import com.pda.pda_android.db.Entry.UserBean;

import com.pda.pda_android.db.dao.JcjyBeanDao;
import com.pda.pda_android.db.dao.SsxxUserInfoBeanDao;
import com.pda.pda_android.db.dao.UserBeanDao;
>>>>>>> Stashed changes

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

<<<<<<< Updated upstream
    private final DaoConfig userBeanDaoConfig;
    private final DaoConfig ssxxUserInfoBeanDaoConfig;
    private final DaoConfig userCheckBeanDaoConfig;

    private final UserBeanDao userBeanDao;
    private final SsxxUserInfoBeanDao ssxxUserInfoBeanDao;
    private final UserCheckBeanDao userCheckBeanDao;
=======
    private final DaoConfig jcjyBeanDaoConfig;
    private final DaoConfig ssxxUserInfoBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;

    private final JcjyBeanDao jcjyBeanDao;
    private final SsxxUserInfoBeanDao ssxxUserInfoBeanDao;
    private final UserBeanDao userBeanDao;
>>>>>>> Stashed changes

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        jcjyBeanDaoConfig = daoConfigMap.get(JcjyBeanDao.class).clone();
        jcjyBeanDaoConfig.initIdentityScope(type);

        ssxxUserInfoBeanDaoConfig = daoConfigMap.get(SsxxUserInfoBeanDao.class).clone();
        ssxxUserInfoBeanDaoConfig.initIdentityScope(type);

<<<<<<< Updated upstream
        userCheckBeanDaoConfig = daoConfigMap.get(UserCheckBeanDao.class).clone();
        userCheckBeanDaoConfig.initIdentityScope(type);

        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);
        ssxxUserInfoBeanDao = new SsxxUserInfoBeanDao(ssxxUserInfoBeanDaoConfig, this);
        userCheckBeanDao = new UserCheckBeanDao(userCheckBeanDaoConfig, this);

        registerDao(UserBean.class, userBeanDao);
        registerDao(SsxxUserInfoBean.class, ssxxUserInfoBeanDao);
        registerDao(UserCheckBean.class, userCheckBeanDao);
    }
    
    public void clear() {
        userBeanDaoConfig.clearIdentityScope();
        ssxxUserInfoBeanDaoConfig.clearIdentityScope();
        userCheckBeanDaoConfig.clearIdentityScope();
=======
        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        jcjyBeanDao = new JcjyBeanDao(jcjyBeanDaoConfig, this);
        ssxxUserInfoBeanDao = new SsxxUserInfoBeanDao(ssxxUserInfoBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);

        registerDao(JcjyBean.class, jcjyBeanDao);
        registerDao(SsxxUserInfoBean.class, ssxxUserInfoBeanDao);
        registerDao(UserBean.class, userBeanDao);
    }
    
    public void clear() {
        jcjyBeanDaoConfig.clearIdentityScope();
        ssxxUserInfoBeanDaoConfig.clearIdentityScope();
        userBeanDaoConfig.clearIdentityScope();
>>>>>>> Stashed changes
    }

    public JcjyBeanDao getJcjyBeanDao() {
        return jcjyBeanDao;
    }

    public SsxxUserInfoBeanDao getSsxxUserInfoBeanDao() {
        return ssxxUserInfoBeanDao;
    }

<<<<<<< Updated upstream
    public UserCheckBeanDao getUserCheckBeanDao() {
        return userCheckBeanDao;
=======
    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
>>>>>>> Stashed changes
    }

}
