package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.JcjyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JCJY_BEAN".
*/
public class JcjyBeanDao extends AbstractDao<JcjyBean, Long> {

    public static final String TABLENAME = "JCJY_BEAN";

    /**
     * Properties of entity JcjyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time_main = new Property(1, String.class, "time_main", false, "TIME_MAIN");
        public final static Property Xiangmu = new Property(2, String.class, "xiangmu", false, "XIANGMU");
        public final static Property Shebei = new Property(3, String.class, "shebei", false, "SHEBEI");
        public final static Property Time_shenqing = new Property(4, String.class, "time_shenqing", false, "TIME_SHENQING");
        public final static Property Time_jiance = new Property(5, String.class, "time_jiance", false, "TIME_JIANCE");
        public final static Property Time_baogao = new Property(6, String.class, "time_baogao", false, "TIME_BAOGAO");
        public final static Property Xiangqing = new Property(7, String.class, "xiangqing", false, "XIANGQING");
    }


    public JcjyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public JcjyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JCJY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME_MAIN\" TEXT," + // 1: time_main
                "\"XIANGMU\" TEXT," + // 2: xiangmu
                "\"SHEBEI\" TEXT," + // 3: shebei
                "\"TIME_SHENQING\" TEXT," + // 4: time_shenqing
                "\"TIME_JIANCE\" TEXT," + // 5: time_jiance
                "\"TIME_BAOGAO\" TEXT," + // 6: time_baogao
                "\"XIANGQING\" TEXT);"); // 7: xiangqing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JCJY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JcjyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time_main = entity.getTime_main();
        if (time_main != null) {
            stmt.bindString(2, time_main);
        }
 
        String xiangmu = entity.getXiangmu();
        if (xiangmu != null) {
            stmt.bindString(3, xiangmu);
        }
 
        String shebei = entity.getShebei();
        if (shebei != null) {
            stmt.bindString(4, shebei);
        }
 
        String time_shenqing = entity.getTime_shenqing();
        if (time_shenqing != null) {
            stmt.bindString(5, time_shenqing);
        }
 
        String time_jiance = entity.getTime_jiance();
        if (time_jiance != null) {
            stmt.bindString(6, time_jiance);
        }
 
        String time_baogao = entity.getTime_baogao();
        if (time_baogao != null) {
            stmt.bindString(7, time_baogao);
        }
 
        String xiangqing = entity.getXiangqing();
        if (xiangqing != null) {
            stmt.bindString(8, xiangqing);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JcjyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time_main = entity.getTime_main();
        if (time_main != null) {
            stmt.bindString(2, time_main);
        }
 
        String xiangmu = entity.getXiangmu();
        if (xiangmu != null) {
            stmt.bindString(3, xiangmu);
        }
 
        String shebei = entity.getShebei();
        if (shebei != null) {
            stmt.bindString(4, shebei);
        }
 
        String time_shenqing = entity.getTime_shenqing();
        if (time_shenqing != null) {
            stmt.bindString(5, time_shenqing);
        }
 
        String time_jiance = entity.getTime_jiance();
        if (time_jiance != null) {
            stmt.bindString(6, time_jiance);
        }
 
        String time_baogao = entity.getTime_baogao();
        if (time_baogao != null) {
            stmt.bindString(7, time_baogao);
        }
 
        String xiangqing = entity.getXiangqing();
        if (xiangqing != null) {
            stmt.bindString(8, xiangqing);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JcjyBean readEntity(Cursor cursor, int offset) {
        JcjyBean entity = new JcjyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time_main
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xiangmu
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shebei
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_shenqing
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time_jiance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time_baogao
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // xiangqing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JcjyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime_main(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXiangmu(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShebei(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime_shenqing(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime_jiance(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime_baogao(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXiangqing(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JcjyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JcjyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JcjyBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
