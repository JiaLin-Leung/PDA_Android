package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Record_no = new Property(1, String.class, "record_no", false, "RECORD_NO");
        public final static Property Patient_no = new Property(2, String.class, "patient_no", false, "PATIENT_NO");
        public final static Property Patient_name = new Property(3, String.class, "patient_name", false, "PATIENT_NAME");
        public final static Property Bed_no = new Property(4, String.class, "bed_no", false, "BED_NO");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Tend = new Property(6, String.class, "tend", false, "TEND");
        public final static Property Age = new Property(7, String.class, "age", false, "AGE");
        public final static Property Ward_code = new Property(8, String.class, "ward_code", false, "WARD_CODE");
        public final static Property In_date = new Property(9, String.class, "in_date", false, "IN_DATE");
        public final static Property Doctor = new Property(10, String.class, "doctor", false, "DOCTOR");
        public final static Property Result = new Property(11, String.class, "result", false, "RESULT");
        public final static Property Zrhs_code = new Property(12, String.class, "zrhs_code", false, "ZRHS_CODE");
        public final static Property Hs_name = new Property(13, String.class, "hs_name", false, "HS_NAME");
        public final static Property Ward_name = new Property(14, String.class, "ward_name", false, "WARD_NAME");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_NO\" TEXT," + // 1: record_no
                "\"PATIENT_NO\" TEXT," + // 2: patient_no
                "\"PATIENT_NAME\" TEXT," + // 3: patient_name
                "\"BED_NO\" TEXT," + // 4: bed_no
                "\"SEX\" TEXT," + // 5: sex
                "\"TEND\" TEXT," + // 6: tend
                "\"AGE\" TEXT," + // 7: age
                "\"WARD_CODE\" TEXT," + // 8: ward_code
                "\"IN_DATE\" TEXT," + // 9: in_date
                "\"DOCTOR\" TEXT," + // 10: doctor
                "\"RESULT\" TEXT," + // 11: result
                "\"ZRHS_CODE\" TEXT," + // 12: zrhs_code
                "\"HS_NAME\" TEXT," + // 13: hs_name
                "\"WARD_NAME\" TEXT);"); // 14: ward_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(2, record_no);
        }
 
        String patient_no = entity.getPatient_no();
        if (patient_no != null) {
            stmt.bindString(3, patient_no);
        }
 
        String patient_name = entity.getPatient_name();
        if (patient_name != null) {
            stmt.bindString(4, patient_name);
        }
 
        String bed_no = entity.getBed_no();
        if (bed_no != null) {
            stmt.bindString(5, bed_no);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String tend = entity.getTend();
        if (tend != null) {
            stmt.bindString(7, tend);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(8, age);
        }
 
        String ward_code = entity.getWard_code();
        if (ward_code != null) {
            stmt.bindString(9, ward_code);
        }
 
        String in_date = entity.getIn_date();
        if (in_date != null) {
            stmt.bindString(10, in_date);
        }
 
        String doctor = entity.getDoctor();
        if (doctor != null) {
            stmt.bindString(11, doctor);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(12, result);
        }
 
        String zrhs_code = entity.getZrhs_code();
        if (zrhs_code != null) {
            stmt.bindString(13, zrhs_code);
        }
 
        String hs_name = entity.getHs_name();
        if (hs_name != null) {
            stmt.bindString(14, hs_name);
        }
 
        String ward_name = entity.getWard_name();
        if (ward_name != null) {
            stmt.bindString(15, ward_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String record_no = entity.getRecord_no();
        if (record_no != null) {
            stmt.bindString(2, record_no);
        }
 
        String patient_no = entity.getPatient_no();
        if (patient_no != null) {
            stmt.bindString(3, patient_no);
        }
 
        String patient_name = entity.getPatient_name();
        if (patient_name != null) {
            stmt.bindString(4, patient_name);
        }
 
        String bed_no = entity.getBed_no();
        if (bed_no != null) {
            stmt.bindString(5, bed_no);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String tend = entity.getTend();
        if (tend != null) {
            stmt.bindString(7, tend);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(8, age);
        }
 
        String ward_code = entity.getWard_code();
        if (ward_code != null) {
            stmt.bindString(9, ward_code);
        }
 
        String in_date = entity.getIn_date();
        if (in_date != null) {
            stmt.bindString(10, in_date);
        }
 
        String doctor = entity.getDoctor();
        if (doctor != null) {
            stmt.bindString(11, doctor);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(12, result);
        }
 
        String zrhs_code = entity.getZrhs_code();
        if (zrhs_code != null) {
            stmt.bindString(13, zrhs_code);
        }
 
        String hs_name = entity.getHs_name();
        if (hs_name != null) {
            stmt.bindString(14, hs_name);
        }
 
        String ward_name = entity.getWard_name();
        if (ward_name != null) {
            stmt.bindString(15, ward_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // record_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // patient_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // patient_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bed_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tend
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ward_code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // in_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // doctor
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // result
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // zrhs_code
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hs_name
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // ward_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecord_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPatient_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPatient_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBed_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTend(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWard_code(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIn_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDoctor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setResult(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZrhs_code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHs_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWard_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
