package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.User_db;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class User_dbDao extends AbstractDao<User_db, Long> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity User_db.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property Age = new Property(2, String.class, "age", false, "AGE");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Huli_level = new Property(4, String.class, "huli_level", false, "HULI_LEVEL");
        public final static Property Bad_num = new Property(5, String.class, "bad_num", false, "BAD_NUM");
        public final static Property User_id = new Property(6, String.class, "user_id", false, "USER_ID");
    }


    public User_dbDao(DaoConfig config) {
        super(config);
    }
    
    public User_dbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"AGE\" TEXT," + // 2: age
                "\"SEX\" TEXT," + // 3: sex
                "\"HULI_LEVEL\" TEXT," + // 4: huli_level
                "\"BAD_NUM\" TEXT," + // 5: bad_num
                "\"USER_ID\" TEXT);"); // 6: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User_db entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String huli_level = entity.getHuli_level();
        if (huli_level != null) {
            stmt.bindString(5, huli_level);
        }
 
        String bad_num = entity.getBad_num();
        if (bad_num != null) {
            stmt.bindString(6, bad_num);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User_db entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String huli_level = entity.getHuli_level();
        if (huli_level != null) {
            stmt.bindString(5, huli_level);
        }
 
        String bad_num = entity.getBad_num();
        if (bad_num != null) {
            stmt.bindString(6, bad_num);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User_db readEntity(Cursor cursor, int offset) {
        User_db entity = new User_db( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // huli_level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bad_num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User_db entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHuli_level(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBad_num(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User_db entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User_db entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User_db entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
