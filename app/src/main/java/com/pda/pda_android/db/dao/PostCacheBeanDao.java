package com.pda.pda_android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pda.pda_android.db.Entry.PostCacheBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST_CACHE_BEAN".
*/
public class PostCacheBeanDao extends AbstractDao<PostCacheBean, Long> {

    public static final String TABLENAME = "POST_CACHE_BEAN";

    /**
     * Properties of entity PostCacheBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Error_code = new Property(2, String.class, "error_code", false, "ERROR_CODE");
        public final static Property Parameter = new Property(3, String.class, "parameter", false, "PARAMETER");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Data = new Property(5, String.class, "data", false, "DATA");
    }


    public PostCacheBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PostCacheBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST_CACHE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"ERROR_CODE\" TEXT," + // 2: error_code
                "\"PARAMETER\" TEXT," + // 3: parameter
                "\"CODE\" TEXT," + // 4: code
                "\"DATA\" TEXT);"); // 5: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST_CACHE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PostCacheBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String error_code = entity.getError_code();
        if (error_code != null) {
            stmt.bindString(3, error_code);
        }
 
        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(4, parameter);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(6, data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PostCacheBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String error_code = entity.getError_code();
        if (error_code != null) {
            stmt.bindString(3, error_code);
        }
 
        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(4, parameter);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(6, data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PostCacheBean readEntity(Cursor cursor, int offset) {
        PostCacheBean entity = new PostCacheBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // error_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parameter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PostCacheBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setError_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParameter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setData(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PostCacheBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PostCacheBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PostCacheBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
