package com.pda.pda_android.db.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPS".
*/
public class AppsDao extends AbstractDao<Apps, Long> {

    public static final String TABLENAME = "APPS";

    /**
     * Properties of entity Apps.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ico = new Property(1, String.class, "ico", false, "ICO");
        public final static Property App_id = new Property(2, String.class, "app_id", false, "APP_ID");
        public final static Property Sort = new Property(3, String.class, "sort", false, "SORT");
        public final static Property Num = new Property(4, String.class, "num", false, "NUM");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
    }


    public AppsDao(DaoConfig config) {
        super(config);
    }
    
    public AppsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ICO\" TEXT," + // 1: ico
                "\"APP_ID\" TEXT," + // 2: app_id
                "\"SORT\" TEXT," + // 3: sort
                "\"NUM\" TEXT," + // 4: num
                "\"TITLE\" TEXT);"); // 5: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Apps entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(2, ico);
        }
 
        String app_id = entity.getApp_id();
        if (app_id != null) {
            stmt.bindString(3, app_id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(4, sort);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Apps entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ico = entity.getIco();
        if (ico != null) {
            stmt.bindString(2, ico);
        }
 
        String app_id = entity.getApp_id();
        if (app_id != null) {
            stmt.bindString(3, app_id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(4, sort);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Apps readEntity(Cursor cursor, int offset) {
        Apps entity = new Apps( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ico
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // app_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sort
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Apps entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIco(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApp_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSort(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Apps entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Apps entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Apps entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
